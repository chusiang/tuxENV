# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# == Colors ==

red='\[\033[0;31m\]'
RED='\[\033[1;31m\]'
green='\[\033[0;32m\]'
GREEN='\[\033[1;32m\]'
yellow='\[\033[0;33m\]'
YELLOW='\[\033[1;33m\]'
blue='\[\033[0;34m\]'
BLUE='\[\033[1;34m\]'
purple='\[\033[0;35m\]'
PURPLE='\[\033[1;35m\]'
cyan='\[\033[0;36m\]'
CYAN='\[\033[1;36m\]'
white='\[\033[0;37m\]'
WHITE='\[\033[1;37m\]'
NC='\[\033[0m\]'              # No Color

# == Git ==

# - prompt 
function parse_git_branch {
	git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)\ /'
}

# - git diff with origin.
function git.diff() {
    git diff --no-ext-diff -w "$@" | vim -R -
}

function gf() {
    git diff --no-ext-diff -w "$@" | vim -R -
}

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines in the history. See bash(1) for more options
# don't overwrite GNU Midnight Commander's setting of `ignorespace'.
HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoredups
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
	xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
	PS1="${debian_chroot:+($debian_chroot)}${white}[ ${YELLOW}\u${RED}@\h ${PURPLE}\w ${white}] ${blue}\$(parse_git_branch)${white}- \A \n${WHITE}\$ ${NC}"
else
	PS1="${debian_chroot:+($debian_chroot)}${white}[ ${YELLOW}\u${RED}@\h ${PURPLE}\w ${white}] ${blue}\$(parse_git_branch)${white}- \A \n${WHITE}\$ ${NC}"
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
	#PS1="${debian_chroot:+($debian_chroot)}$white[ $YELLOW\u$RED@\h $PURPLE\w $white] - \A \n$WHITE\$ $NC"
	PS1="${debian_chroot:+($debian_chroot)}${white}[ ${YELLOW}\u${RED}@\h ${PURPLE}\w ${white}] ${blue}\$(parse_git_branch)${white}- \A \n${WHITE}\$ ${NC}"
    ;;
*)
    ;;
esac

# load custom aliases.
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# load custom export.
if [ -f ~/.bash_export ]; then
    . ~/.bash_export
fi

# enable the bash_completion
#
# - under GNU/Linux.
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi
#
# - under Mac OSX (homebrew).
if [ "$(uname)" == "Darwin" ]; then
  if [ -f $(brew --prefix)/etc/bash_completion ]; then
    . $(brew --prefix)/etc/bash_completion
  fi
fi

# enable the autojump.
#
# - under GNU/Linux
if [ -f /usr/share/autojump/autojump.bash ]; then
  . /usr/share/autojump/autojump.bash
fi
#
# - under Mac OSX (homebrew).
if [ -f /usr/local/share/autojump/autojump.bash ]; then
  . /usr/local/share/autojump/autojump.bash
fi
#
# - tab-completion for mosh.
if [ "$(uname)" == "Darwin" ]; then
  ssh_complete=$(complete -p ssh)
  eval "$ssh_complete mosh"
fi

# == Color Man Pages ==

# - with less.
#man() {
#	env \
#	LESS_TERMCAP_mb=$(printf "\e[1;31m") \
#	LESS_TERMCAP_md=$(printf "\e[1;31m") \
#	LESS_TERMCAP_me=$(printf "\e[0m") \
#	LESS_TERMCAP_se=$(printf "\e[0m") \
#	LESS_TERMCAP_so=$(printf "\e[1;47;0;31m") \
#	LESS_TERMCAP_ue=$(printf "\e[0m") \
#	LESS_TERMCAP_us=$(printf "\e[1;33m") \
#	man "$@"
#}

# - with Vim.
man () {
	/usr/bin/man $@ | col -b | vim -R -c 'set ft=man nomod nolist' -
}

# == config ==
set -o vi
set prompt = "%{\ek\e\\%}%% "

# - show message with notification-daemon.
#msg() {
#	eval $* && notify-send "Shell Information" "「$*」has done." -i 'dialog-apply1' -t '2000' \
#	|| notify-send "Shell Information" "「$*」has Failed." -i 'application-exit1' -t '2000'
#}


# ------------------------------------
# Author : Chu-Siang Lai
# E-mail : jonny (at) drx.tw
# Blog: http://note.drx.tw
# ------------------------------------
